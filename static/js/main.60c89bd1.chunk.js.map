{"version":3,"sources":["actions/index.js","pages/Login.js","components/Header.jsx","components/ExpenseForm.jsx","components/ExpenseTable.jsx","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["GET_CURRENCIES","FAILED_REQUEST","GET_RATES","REMOVE_EXPENSE","failedRequest","error","type","payload","Login","state","email","password","redirect","handleChange","bind","isValid","handleClick","target","name","value","this","setState","emailValidator","match","passwordValidator","length","dispatchSetEmail","props","to","className","htmlFor","id","onChange","disabled","onClick","React","Component","connect","dispatch","Header","currency","expensesSum","expenses","map","exchangeRates","ask","reduce","acc","curr","emailInput","expenseValue","toFixed","user","wallet","INITIAL_STATE","description","method","tag","methods","tagArray","ExpenseForm","updateRates","fetchCurrency","fetchRate","currencies","item","index","a","fetch","fetchAPI","json","data","keys","Object","filter","key","expenseObj","fetchRates","tableHeader","ExpenseTable","deleteButton","deleteExpense","expense","split","Math","round","removeExpense","Wallet","App","exact","path","component","Boolean","window","location","hostname","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.60c89bd1.chunk.js","sourcesContent":["// Coloque aqui suas actions\nconst SET_EMAIL = 'SET_EMAIL';\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\nexport const FAILED_REQUEST = 'FAILED_REQUEST';\nexport const GET_RATES = 'GET_RATES';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\nexport const setEmail = (payload) => (\n  {\n    type: SET_EMAIL, payload,\n  }\n);\n\nconst getCurrencies = (json) => ({\n  type: GET_CURRENCIES, payload: json,\n});\n\nconst failedRequest = (error) => ({\n  type: FAILED_REQUEST, payload: error,\n});\n\nconst getRates = (json) => ({\n  type: GET_RATES, payload: json,\n});\n\nexport const removeExpense = (payload) => ({\n  type: REMOVE_EXPENSE, payload,\n});\n\nexport const fetchCurrencies = () => (\n  async (dispatch) => {\n    try {\n      const fetchAPI = await fetch('https://economia.awesomeapi.com.br/json/all');\n      const data = await fetchAPI.json();\n      const keys = Object.keys(data).filter((key) => key !== 'USDT');\n      return dispatch(getCurrencies(keys));\n    } catch (error) {\n      return dispatch(failedRequest(error));\n    }\n  }\n);\n\nexport const fetchRates = (state, id) => (\n  async (dispatch) => {\n    try {\n      const fetchAPI = await fetch('https://economia.awesomeapi.com.br/json/all');\n      const exchangeRates = await fetchAPI.json();\n      const expenseObj = { ...state, exchangeRates, id };\n      return dispatch(getRates(expenseObj));\n    } catch (error) {\n      return dispatch(failedRequest(error));\n    }\n  }\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setEmail } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      redirect: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.isValid = this.isValid.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  isValid() {\n    const NUMBER = 5;\n    const { email, password } = this.state;\n    const emailValidator = email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/i);\n    const passwordValidator = password.length > NUMBER;\n    if (emailValidator && passwordValidator) return true;\n  }\n\n  handleClick() {\n    const { dispatchSetEmail } = this.props;\n    const { email } = this.state;\n    this.setState({ redirect: true });\n    dispatchSetEmail(email);\n  }\n\n  render() {\n    const { email, password, redirect } = this.state;\n    if (redirect) return <Redirect to=\"/trybe-wallet/carteira\" />;\n    return (\n      <div className=\" flex w-screen h-screen justify-center bg-blue-900\">\n        <div className=\"flex flex-col justify-center\">\n          <h1 className=\"mb-8 mx-auto text-white font-bold text-3xl\">TrybeWallet</h1>\n          <div className=\"flex flex-col\">\n            <div className=\"text-white font-bold text-lg\">Email</div>\n            <div>\n              <label htmlFor=\"input-email\">\n                <input\n                  className=\"rounded-sm\"\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"input-email\"\n                  data-testid=\"email-input\"\n                  onChange={ this.handleChange }\n                  value={ email }\n                />\n              </label>\n            </div>\n          </div>\n          <div>\n            <div className=\"text-white font-bold text-lg\">Senha</div>\n            <div>\n              <label htmlFor=\"input-password\">\n              <input\n                className=\"rounded-sm\"\n                type=\"text\"\n                name=\"password\"\n                id=\"input-password\"\n                data-testid=\"password-input\"\n                onChange={ this.handleChange }\n                value={ password }\n              />\n            </label>\n            </div>\n          </div>\n          <button\n            className=\"my-4 w-2/6 bg-white mx-auto rounded font-bold hover:border-blue-600 border-2\"\n            type=\"button\"\n            disabled={ !this.isValid() }\n            onClick={ this.handleClick }\n          >\n            Entrar\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatchSetEmail: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchSetEmail: (email) => dispatch(setEmail(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currency: 'BRL',\n    };\n    this.expensesSum = this.expensesSum.bind(this);\n  }\n\n  expensesSum() {\n    const { expenses } = this.props;\n    if (expenses.length === 0) return 0;\n    return expenses\n      .map(({ value, currency, exchangeRates }) => exchangeRates[currency].ask * value)\n      .reduce((acc, curr) => acc + curr);\n  }\n\n  render() {\n    const { emailInput } = this.props;\n    const expenseValue = this.expensesSum();\n    const { currency } = this.state;\n    return (\n      <div className=\"bg-blue-900 text-white p-2 rounded\">\n        <h1 className=\"text-center text-2xl font-bold\">TRYBE WALLET</h1>\n        <hr/>\n        <div className=\"text-center mb-2\" data-testid=\"email-field\">{ emailInput }</div>\n        <div className=\"text-lg\" data-testid=\"total-field\">\n          <span className=\"mr-1\">Despesas:</span>\n          { expenseValue.toFixed(2) }\n          <span className=\"ml-1\" data-testid=\"header-currency-field\">\n            { currency }\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  emailInput: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  emailInput: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrencies, fetchRates } from '../actions';\n\nconst INITIAL_STATE = {\n  value: '',\n  description: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n};\nconst methods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\nconst tagArray = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\nclass ExpenseForm extends React.Component {\n  constructor() {\n    super();\n    this.state = INITIAL_STATE;\n    this.handleChange = this.handleChange.bind(this);\n    this.updateRates = this.updateRates.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchCurrency } = this.props;\n    fetchCurrency();\n  }\n\n  handleChange({ target }) {\n    const { id, value } = target;\n    this.setState({\n      [id]: value,\n    });\n  }\n\n  updateRates() {\n    const { fetchRate, expenses } = this.props;\n    const id = expenses.length;\n    fetchRate(this.state, id);\n    this.setState(INITIAL_STATE);\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    if (!currencies) return <p>Loading...</p>;\n    return (\n      <form className=\"flex flex-col bg-blue-900 text-white p-2\">\n        <label htmlFor=\"value\">\n          Valor\n          <input\n            type=\"number\"\n            id=\"value\"\n            value={ value }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"description\">\n          Descrição\n          <input\n            type=\"text\"\n            id=\"description\"\n            value={ description }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"currency\">\n          Moeda\n          <select id=\"currency\" value={ currency } onChange={ this.handleChange }>\n            { currencies.map((curr) => <option key={ curr }>{ curr }</option>)}\n          </select>\n        </label>\n        <label htmlFor=\"method\">\n          Método de Pagamento\n          <select id=\"method\" value={ method } onChange={ this.handleChange }>\n            { methods.map((item, index) => <option key={ index }>{ item }</option>) }\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Tag\n          <select id=\"tag\" value={ tag } onChange={ this.handleChange }>\n            { tagArray.map((item, index) => <option key={ index }>{ item }</option>)}\n          </select>\n        </label>\n        <button type=\"button\" onClick={ this.updateRates }>Adicionar despesa</button>\n      </form>\n    );\n  }\n}\n\nExpenseForm.propTypes = {\n  fetchCurrency: PropTypes.func.isRequired,\n  fetchRate: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrency: () => dispatch(fetchCurrencies()),\n  fetchRate: (state, id) => dispatch(fetchRates(state, id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { removeExpense } from '../actions';\n\nconst tableHeader = ['Descrição', 'Tag', 'Método de pagamento', 'Valor',\n  'Moeda', 'Câmbio utilizado', 'Valor convertido', 'Moeda de conversão',\n  'Editar/Excluir'];\n\nclass ExpenseTable extends React.Component {\n  constructor() {\n    super();\n\n    this.deleteButton = this.deleteButton.bind(this);\n  }\n\n  deleteButton(id) {\n    const { expenses, deleteExpense } = this.props;\n    const filtered = expenses.filter((expense) => expense.id !== id);\n    deleteExpense(filtered);\n  }\n\n  render() {\n    const { expenses } = this.props;\n    if (expenses.length === 0) return <div>Ainda não temos despesas registradas!</div>;\n    return (\n      <div>\n        <table>\n          <tr>\n            { tableHeader.map((item, index) => <th key={ index }>{ item }</th>)}\n          </tr>\n          {\n            expenses\n              .map(\n                ({ description, tag, method, value, currency, exchangeRates, id }) => (\n                  <tr key={ id }>\n                    <td>{ description }</td>\n                    <td>{ tag }</td>\n                    <td>{ method }</td>\n                    <td>{ value }</td>\n                    <td>\n                      { exchangeRates[currency].name.split('/')[0] }\n                    </td>\n                    <td>{ Math.round(exchangeRates[currency].ask * 100) / 100 }</td>\n                    <td>\n                      {\n                        (Math.round(exchangeRates[currency].ask * value * 100) / 100)\n                      }\n                    </td>\n                    <td>Real</td>\n                    <td>\n                      <button\n                        type=\"button\"\n                        onClick={ () => this.deleteButton(id) }\n                        data-testid=\"delete-btn\"\n                      >\n                        Excluir\n                      </button>\n                      <button type=\"button\">\n                        Editar\n                      </button>\n                    </td>\n                  </tr>\n                ),\n              )\n          }\n        </table>\n      </div>\n    );\n  }\n}\n\nExpenseTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteExpense: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (payload) => dispatch(removeExpense(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseTable);\n","import React from 'react';\nimport Header from '../components/Header';\nimport ExpenseForm from '../components/ExpenseForm';\nimport ExpenseTable from '../components/ExpenseTable';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <ExpenseForm />\n        <ExpenseTable />\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/trybe-wallet\" component={ Login } />\n        <Route path=\"/trybe-wallet/carteira\" component={ Wallet } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'SET_EMAIL':\n    return { ...state, email: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { GET_CURRENCIES, FAILED_REQUEST, GET_RATES, REMOVE_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst wallet = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case GET_CURRENCIES:\n    return { ...state, currencies: payload };\n  case FAILED_REQUEST:\n    return { ...state, error: payload };\n  case GET_RATES:\n    return { ...state, expenses: [...state.expenses, { ...payload }] };\n  case REMOVE_EXPENSE:\n    return { ...state, expenses: payload };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}